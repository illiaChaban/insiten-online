{"version":3,"sources":["Components/SearchContainer.js","Components/TargetElements.js","redux/actions.js","Components/TargetActions.js","Components/ContactsEdit.js","Components/constants.js","lib.js","Components/TargetsList.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["statuses","SearchByStatus","value","handler","className","onChange","map","status","key","SearchByName","type","placeholder","AddTargetBtn","onClick","SearchContainer","props","searchByName","searchByStatus","handleSearchByName","handleSearchByStatus","addNewCompany","Contacts","keyContacts","length","contact","i","Label","label","name","Input","data-name","Select","options","option","Textarea","SmallBtn","updateCompanies","data","payload","toString","deleteCompany","toggleEditState","id","editCompany","addCompany","connect","edit","ContactsEdit","contacts","addContact","removeContact","handleChange","data-index","flattenObject","obj","flattened","Object","keys","forEach","val","Array","isArray","assign","generateId","cloneObj","cloned","TargetStatic","industry","description","marketCapitalization","stockPrice","financialPerformance","getElementData","e","field","target","getAttribute","idx","Target","updateCompany","update","company","splice","push","renderField","this","Component","TargetsList","targets","App","componentDidMount","mockData","setState","str","toLowerCase","filterSearchedTargets","state","companies","filter","includes","searchedCompanies","Boolean","window","location","hostname","match","initialState","reducers","oldState","x","index","findIndex","companyInfo","newState","newCompany","unshift","store","createStore","action","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff3c9209.chunk.js","sourcesContent":["import React from 'react';\n\n// function getAllStatuses() {\n//   const { companies } = store.getState();\n//   return companies.reduce( (statuses, {status}) => {\n//     if (!statuses.includes(status)) statuses.push(status);\n//     return statuses;\n//   }, []);\n// };\nconst statuses = ['approved', 'pending approval', 'researching', 'declined'];\n\nconst SearchByStatus = ({value, handler}) => (\n  <div className=\"flex flex-center-h flex-grow-1\">\n    <select value={value} onChange={handler}>\n      <option value=''>Filter by status</option>\n      {statuses.map( status => <option value={status} key={status}>{status}</option>)}\n    </select>\n  </div>\n);\n\nconst SearchByName = ({value, handler}) => (\n  <div className='flex-grow-1'>\n    <input \n      type='text' \n      placeholder='Search by name...'\n      value={value}\n      onChange={handler}></input>\n  </div>\n);\n\nlet AddTargetBtn = ({handler}) => (\n  <button className='btn' onClick={handler}>Add new</button>\n);\n\nconst SearchContainer = (props) => {\n  const {\n    searchByName, \n    searchByStatus, \n    handleSearchByName, \n    handleSearchByStatus,\n    addNewCompany,\n  } = props;\n\n  return (\n    <div className='search-container row space-between min-space-between-h'>\n      <SearchByName\n        value={searchByName}\n        handler={handleSearchByName}/>\n      <SearchByStatus \n        value={searchByStatus}\n        handler={handleSearchByStatus}/>\n      <AddTargetBtn handler={addNewCompany}/>\n    </div>\n  )\n};\n\nexport default SearchContainer;","import React from 'react';\n\nexport const Contacts = ({keyContacts}) => {\n  if (!keyContacts.length) return null;\n  return (\n    <ul>\n      Key contacts:\n      {keyContacts.map( (contact,i) => (\n        <div key={i}>{contact}</div>\n      ))}\n    </ul>\n  );\n};\n\nconst Label = ({label, name}) => {\n  if (label === false) return null;\n  return (\n    <span className='margin-right-5'>{label || name}:</span>\n  );\n}\n\nexport const Input = ({name, label, value, handler}) => (\n  <div>\n    <label>\n      <Label label={label} name={name}/>\n      <input type='text' onChange={handler} value={value} data-name={name}></input>\n    </label>\n  </div>\n);\n\nexport const Select = ({name, value, handler, options}) => (\n  <div>\n    <label>\n      <Label name={name}/>\n      <select type='text' onChange={handler} value={value} data-name={name}>\n        {options.map( option => <option value={option} key={option}>{option}</option>)}\n      </select>\n    </label>\n  </div>\n);\n\nexport const Textarea = ({name, value, handler}) => (\n  <div>\n    <label>\n      {/* {name}: */}\n      <textarea \n        onChange={handler} \n        value={value} \n        data-name={name}\n        placeholder={name + \"...\"}\n      ></textarea>\n    </label>\n  </div>\n);\n\nexport const SmallBtn = ({name, handler}) => (\n  <button className='btn btn-small' onClick={handler}>{name}</button>\n);\n","const UPDATE_COMPANIES = 'UPDATE_COMPANIES';\nconst DELETE_COMPANY = \"DELETE_COMPANY\";\nconst ADD_COMPANY = \"ADD_COMPANY\";\nconst TOGGLE_EDIT_STATE = \"TOGGLE_EDIT_STATE\";\nconst EDIT_COMPANY = \"EDIT_COMPANY\";\n\nexport const updateCompanies = data => ({\n  type: UPDATE_COMPANIES,\n  payload: data\n});\nupdateCompanies.toString = () => UPDATE_COMPANIES;\n\nexport const deleteCompany = data => ({\n  type: DELETE_COMPANY,\n  payload: data\n});\ndeleteCompany.toString = () => DELETE_COMPANY;\n\nexport const toggleEditState = id => ({\n  type: TOGGLE_EDIT_STATE,\n  payload: id\n});\ntoggleEditState.toString = () => TOGGLE_EDIT_STATE;\n\nexport const editCompany = (data) => ({\n  type: EDIT_COMPANY,\n  payload: data\n});\neditCompany.toString = () => EDIT_COMPANY;\n\n\nexport const addCompany = () => ({\n  type: ADD_COMPANY,\n  payload: null\n});\naddCompany.toString = () => ADD_COMPANY;","import React from 'react';\nimport {connect} from 'react-redux';\nimport {deleteCompany, toggleEditState} from './../redux/actions';\nimport {SmallBtn} from './TargetElements';\n\nlet TargetActions = ({data, deleteCompany, toggleEditState}) => (\n  <div className='row space-between actions'>\n    <SmallBtn name='delete' handler={()=>deleteCompany(data)}/>\n    <SmallBtn \n      name={data.edit ? 'done' : 'edit'} \n      handler={()=>toggleEditState(data.id)}\n    />\n  </div>\n);\n\nexport default connect(\n  null,\n  {deleteCompany, toggleEditState}\n)(TargetActions);","import React from 'react';\n\nconst ContactsEdit = ({contacts, addContact, removeContact, handleChange}) => (\n  <ul className='flex-grow-1'>\n    Key contacts:\n    {contacts.map( (contact,i) => {\n      return (\n        <div key={i} className='row'>\n          <input \n            type='text' \n            value={contact}\n            data-name='keyContacts'\n            data-index={i}\n            onChange={handleChange}\n          ></input>\n          <button \n            className='btn btn-xs remove'\n            onClick={removeContact}\n            data-name='keyContacts'\n            data-index={i}\n          ></button>\n        </div>\n      );\n    })}\n    <div>\n      <button \n        className='btn btn-xs add'\n        data-name='keyContacts'\n        onClick={addContact}\n      ></button>\n    </div>\n  </ul>\n);\n\nexport default ContactsEdit;","export const statuses = ['approved', 'pending approval', 'researching', 'declined'];","/**\n * Flatten a multidimensional object\n * Don't flatten arrays\n *\n * var \n * For example:\n   var o = {\n    a: 2, \n    b: {\n      c: 3,\n      d: {\n        e: 4\n      }\n    },\n    k: [ [1,2], [3] ]\n  }\n *   flattenObject({ a: 1, b: { c: 2 } })\n * Returns:\n *   {a: 2, c: 3, e: 4, k: [ [1,2], [3]]}\n */\nexport const flattenObject = (obj) => {\n  const flattened = {}\n\n  Object.keys(obj).forEach( key =>  {\n    const val = obj[key];\n    const isHashmap = typeof val === 'object' \n                      && val !== null \n                      && !Array.isArray(val);\n\n    if (isHashmap) {\n      Object.assign(flattened, flattenObject(val));\n    } else {\n      flattened[key] = val;\n    }\n  });\n\n  return flattened\n};\n\n\nlet id = 0;\nexport const generateId = () => ++id;\n\n// easy solution to clone obj (with data loss)\n// good enough for now\n// will loose undefined, null, Date, Infinity... values\nexport const cloneObj = (obj) => {\n  let cloned = obj;\n  if (typeof obj === 'object') {\n    cloned = Array.isArray(obj) ? [] : {};\n    Object.keys(obj).forEach(key =>{\n      cloned[key] = cloneObj(obj[key]);\n    });\n  } \n  return cloned;\n};\n// export const cloneObj = (obj) => JSON.parse(JSON.stringify(obj));\n","import React, {Component} from 'react';\nimport {Input, Select, Textarea, Contacts} from './TargetElements';\nimport TargetActions from './TargetActions';\nimport ContactsEdit from './ContactsEdit';\nimport {connect} from 'react-redux';\nimport {statuses} from './constants';\nimport {editCompany} from './../redux/actions';\nimport {cloneObj} from './../lib';\n\n\nconst TargetsList = ({targets}) => (\n  <div className='col space-between min-space-between-v'>\n    {targets.map( target => (\n      <Target \n        data={target} \n        key={target.id}\n      />\n    ))}\n  </div>\n);\n\nconst TargetStatic = ({data}) => {\n  const {\n    name, \n    industry, \n    description, \n    marketCapitalization, \n    stockPrice, \n    keyContacts, \n    financialPerformance, \n    status,\n  } = data;\n\n  return (\n    <div className='target-container'>\n      <div className='row space-between'>\n        <div className='name'>{name}</div>\n        <TargetActions data={data}/>\n      </div>\n      <div className='status'>\n        <span>Status: {status}</span>\n      </div>\n      <div className='info'>\n        <div className='row space-between'>\n          <ul>\n            <li>Industry: {industry || \"No data\"}</li>\n            <li>Market Capitalization: {marketCapitalization ? '$'+marketCapitalization : \"No data\"}</li>\n            <li>Stock Price: {stockPrice ? '$'+stockPrice : \"No data\"}</li>\n            <li>Performance: {financialPerformance || \"No data\"}</li>\n          </ul>\n\n          <Contacts keyContacts={keyContacts}/>\n        </div>\n        {description && <p>Description: {description}</p>}\n      </div>\n      \n    </div>\n  );\n};\n\n\nfunction getElementData(e) {\n  const field = e.target;\n  const key = field.getAttribute('data-name');\n  const idx = field.getAttribute('data-index');\n  const val = field.value;\n  return {key, val, idx};\n};\nclass Target extends Component {\n\n  updateCompany = update => {\n    let company = cloneObj( this.props.data );\n    update(company); // mutating cloned object\n    this.props.editCompany(company);\n  };\n\n  handleChange = (e) => {\n    this.updateCompany( company => {\n      const {key, val, idx} = getElementData(e);\n      if (idx) { // if array\n        company[key][idx] = val; \n      } else { \n        company[key] = val; \n      }\n    });\n  };\n\n  removeContact = (e) => {\n    this.updateCompany( company => {\n      const {key, idx} = getElementData(e);\n      company[key].splice(idx, 1); // removing el\n    });\n  };\n\n  addContact = (e) => {\n    this.updateCompany( company => {\n      const {key} = getElementData(e);\n      company[key].push('');\n    });\n  };\n\n  renderField = (field, name, label) => {\n    const props = {\n      name,\n      label,\n      handler: this.handleChange,\n      value: this.props.data[name],\n      key: name,\n    };\n\n    switch (field) {\n      case 'input':\n        return <Input {...props}/>;\n      case 'select':\n        return <Select {...props} options={statuses} />;\n      case 'textarea':\n        return <Textarea {...props} />;\n      default:\n        return null;\n    }\n  }\n\n  render() {\n\n    const {data} = this.props;\n    if (!data.edit) return <TargetStatic data={this.props.data}/>;\n\n    return (\n      <div className='target-container edit'>\n        <div className='row space-between name-edit align-center'>\n          {this.renderField('input', 'name')}\n          <TargetActions data={data}/>\n        </div>\n        {this.renderField('select', 'status')}\n        <div className='info'>\n          <div className='row'>\n            <ul>\n              <li>{this.renderField('input', 'industry')}</li>\n              <li>{this.renderField('input', 'marketCapitalization', 'Market Capitalization')}</li>\n              <li>{this.renderField('input', 'stockPrice', 'Stock Price')}</li>\n              <li>{this.renderField('input', 'financialPerformance', 'Performance')}</li>\n            </ul>\n            <ContactsEdit \n              contacts={data.keyContacts}\n              handleChange={this.handleChange}\n              removeContact={this.removeContact}\n              addContact={this.addContact}\n            />\n          </div>\n          {this.renderField('textarea', 'description')}\n        </div>\n      </div>\n    );\n  }\n};\nTarget = connect(\n  null,\n  {editCompany}\n)(Target);\n\nexport default TargetsList;","import mockData from './mockData.json';\nimport SearchContainer from './Components/SearchContainer';\nimport TargetsList from './Components/TargetsList';\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {updateCompanies, addCompany} from './redux/actions';\nimport {flattenObject, generateId} from './lib';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchByName: '',\n      searchByStatus: '',\n    };\n  }\n\n  componentDidMount = () => {\n    //simulating fetch request\n    const flattened = mockData.map( company => {\n      const obj = flattenObject(company);\n      obj.id = obj.id || generateId();\n      obj.edit = false;\n      return obj;\n    });\n    this.props.updateCompanies(flattened); \n  };\n\n  addNewCompany = () => {\n    // reset search to be able to show\n    // empty card\n    this.setState({\n      searchByName: '',\n      searchByStatus: '',\n    });\n    this.props.addCompany();\n  };\n\n\n  handleSearchByName = (e) => {\n    let str = e.target.value;\n    if (str) str = str.toLowerCase();\n    this.setState({\n      searchByName: str\n    })\n  };\n\n  handleSearchByStatus = (e) => {\n    this.setState({\n      searchByStatus: e.target.value\n    })\n  };\n\n  filterSearchedTargets = () => {\n    const {searchByName, searchByStatus} = this.state;\n    const {companies} = this.props;\n    let filtered = companies.filter( company => {\n      if (searchByName && !company.name.toLowerCase().includes(searchByName)) return false;\n      if (searchByStatus && company.status !== searchByStatus) return false;\n      return true;\n    });\n    return filtered;\n  }\n\n  render() {\n    const {searchByName, searchByStatus} = this.state;\n    const searchedCompanies = this.filterSearchedTargets();\n    return (\n      <div className='main-container'>\n        <SearchContainer\n          handleSearchByStatus={this.handleSearchByStatus}\n          handleSearchByName={this.handleSearchByName}\n          searchByName={searchByName}\n          searchByStatus={searchByStatus}\n          addNewCompany={this.addNewCompany}\n        />\n        <TargetsList \n          targets={searchedCompanies} \n        />\n      </div>\n    );\n  }\n}\n\n\nexport default connect(\n  (state) => {\n    const {companies} = state;\n    return {\n      companies\n    }\n  },\n  { updateCompanies, addCompany }\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {cloneObj, generateId} from './../lib';\n\nexport const updateCompaniesReducer = (oldState, companies) => ({\n  ...oldState,\n  companies\n});\n\nexport const deleteCompanyReducer = (oldState, company) => {\n  const {companies} = oldState;\n  const updated = companies.filter( x => x !== company);\n  return {...oldState, companies: updated };\n};\n\nexport const editCompanyReducer = (oldState, company) => {\n  const { companies } = oldState;\n  const updatedCompanies = companies.map( x => x.id === company.id ? company : x );\n  // ...\n  return {...oldState, companies: updatedCompanies};\n};\n\n\nconst getEmptyCompanyInfo = () => ({\n  \"name\": '',\n  \"industry\": '',\n  \"description\": '',\n  \"marketCapitalization\": '',\n  \"stockPrice\": '',\n  \"keyContacts\": [],\n  \"financialPerformance\": '',\n  // hardcoding first value that matches the first option passed in\n  // to the status  --- CHANGE!\n  \"status\": 'approved', \n  \"edit\": true,\n  \"id\": generateId(),\n});\nexport const addCompanyReducer = (oldState) => {\n  const newState = cloneObj( oldState );\n  const newCompany = getEmptyCompanyInfo();\n  newState.companies.unshift( newCompany );\n  return newState;\n};\n\nexport const toggleEditReducer = (oldState, id) => {\n  const {companies} = oldState;\n  const index = companies.findIndex( company => company.id === id);\n  const companyInfo = { ...companies[index] };\n  companyInfo.edit = !companyInfo.edit;\n  const updatedCompanies = companies.map( x => x.id === id ? companyInfo : x );\n  return {...oldState, companies: updatedCompanies};\n};","import {createStore} from 'redux';\nimport {\n  updateCompanies, \n  deleteCompany,\n  toggleEditState,\n  editCompany,\n  addCompany,\n} from './actions';\nimport {\n  updateCompaniesReducer,\n  deleteCompanyReducer,\n  toggleEditReducer,\n  editCompanyReducer,\n  addCompanyReducer,\n} from './reducers';\n\nconst initialState = {\n  companies: [],\n};\n\nconst reducers = {\n  [updateCompanies]: updateCompaniesReducer,\n  [deleteCompany]: deleteCompanyReducer,\n  [toggleEditState]: toggleEditReducer,\n  [editCompany]: editCompanyReducer,\n  [addCompany]: addCompanyReducer,\n};\nconst rootReducer = (oldState = initialState, action) => {\n  const reducer = reducers[action.type];\n  if (reducer) {\n    // console.log('reducing ', action.type, action.payload)\n    return reducer(oldState, action.payload);\n  }\n  return oldState;\n};\n\nlet store = createStore(rootReducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}